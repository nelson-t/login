/*
 * The MIT License
 *
 * Copyright 2021 Administrator.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package com.idelogix.login.ui;

import com.idelogix.login.dao.ConnectionFactory;
import com.idelogix.login.dao.ScriptRunner;
import com.idelogix.login.service.Utils;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.Reader;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.SwingWorker;

/**
 *
 * @author Administrator
 */
public class InitDbUI extends javax.swing.JDialog {

    /**
     * Creates new form InitDB
     */
    public InitDbUI(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bContinue = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tMessage = new javax.swing.JTextArea();
        lTitle = new javax.swing.JLabel();
        bExit = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        bContinue.setText("Continue");
        bContinue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bContinueActionPerformed(evt);
            }
        });

        tMessage.setColumns(20);
        tMessage.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        tMessage.setLineWrap(true);
        tMessage.setRows(5);
        tMessage.setText("Caution! The DB will be initialized with fresh data. \n\nAll current data will be deleted! Only continue if you know what you are doing. Exit now if you are not sure!\n\n");
        tMessage.setWrapStyleWord(true);
        jScrollPane1.setViewportView(tMessage);

        lTitle.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lTitle.setForeground(new java.awt.Color(255, 0, 51));
        lTitle.setText("DB Initialization Program");

        bExit.setText("Exit");
        bExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bExitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 680, Short.MAX_VALUE)
                            .addComponent(lTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(265, 265, 265)
                        .addComponent(bContinue)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(bExit)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addComponent(lTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 209, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bContinue)
                    .addComponent(bExit))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bContinueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bContinueActionPerformed
        initDB();
    }//GEN-LAST:event_bContinueActionPerformed

    private void bExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bExitActionPerformed
        this.dispose();
    }//GEN-LAST:event_bExitActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InitDbUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InitDbUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InitDbUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InitDbUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                InitDbUI dialog = new InitDbUI(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bContinue;
    private javax.swing.JButton bExit;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lTitle;
    private javax.swing.JTextArea tMessage;
    // End of variables declaration//GEN-END:variables

    String f_action = "resources/sql/login_action.sql";
    String f_resource = "resources/sql/login_resource.sql";
    String f_resource_action = "resources/sql/login_resource_action.sql";
    String f_role = "resources/sql/login_role.sql";
    String f_role_resource_action = "resources/sql/login_role_resource_action.sql";
    String f_type = "resources/sql/login_type.sql";
    String f_user = "resources/sql/login_user.sql";
    String f_user_role = "resources/sql/login_user_role.sql";
    String f_routines = "resources/sql/login_routines.sql";    

    Connection getConnection() throws SQLException {
        Connection conn = ConnectionFactory.getInstance().getConnection();
        return conn;
    }

    private void initDB() {
        bContinue.setEnabled(false);

        SwingWorkerImpl sw = new SwingWorkerImpl();
        sw.execute();
    }

    private class SwingWorkerImpl extends SwingWorker<Void, String> {

        public SwingWorkerImpl() {
        }

        @Override
        protected Void doInBackground() throws InterruptedException {
            Connection con = null;
            PreparedStatement ptmt = null;
            try {
                con = getConnection();
                Reader reader;
                File file;
                ScriptRunner sr = new ScriptRunner(con, false, true);
                publish("Processing:");
                
                file = new File(f_role_resource_action);
                publish(file.getAbsolutePath());
                reader = new BufferedReader(new FileReader(file));
                sr.runScript(reader);
                reader.close();

                file = new File(f_resource_action);
                publish(file.getAbsolutePath());
                reader = new BufferedReader(new FileReader(file));
                sr.runScript(reader);
                reader.close();

                file = new File(f_user_role);
                publish(file.getAbsolutePath());
                reader = new BufferedReader(new FileReader(file));
                sr.runScript(reader);
                reader.close();

                file = new File(f_action);
                publish(file.getAbsolutePath());
                reader = new BufferedReader(new FileReader(file));
                sr.runScript(reader);
                reader.close();

                file = new File(f_resource);
                publish(file.getAbsolutePath());
                reader = new BufferedReader(new FileReader(file));
                sr.runScript(reader);
                reader.close();

                file = new File(f_type);
                publish(file.getAbsolutePath());
                reader = new BufferedReader(new FileReader(file));
                sr.runScript(reader);
                reader.close();

                file = new File(f_role);
                publish(file.getAbsolutePath());
                reader = new BufferedReader(new FileReader(file));
                sr.runScript(reader);
                reader.close();

                file = new File(f_user);
                publish(file.getAbsolutePath());
                reader = new BufferedReader(new FileReader(file));
                sr.runScript(reader);
                reader.close();
                
                file = new File(f_routines);
                publish(file.getAbsolutePath());
                reader = new BufferedReader(new FileReader(file));
                sr.setDelimiter(";;", false);
                sr.runScript(reader);
                reader.close();

            } catch (SQLException e) {
                Utils.log.error("Error on InitDB", e);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(InitDbUI.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(InitDbUI.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                Utils.tryCloseDB(con, ptmt, null);
            }

           return null;
        }

        @Override
        protected void process(List<String> chunk) {
            for (String s : chunk) {
                tMessage.setText(tMessage.getText() + "\n"+ s);
            }
        }

        @Override
        public void done() {
            //bContinue.setEnabled(true);
            tMessage.setText(tMessage.getText() + " \n\nFinished successfuly. You can enter the application now.");
        }
    }
}
