
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.idelogix.login.ui;

import com.idelogix.login.model.Action;
import com.idelogix.login.model.Resource;
import com.idelogix.login.service.Globals;
import com.idelogix.login.service.Props;
import com.idelogix.login.service.ResourceService;
import com.idelogix.login.service.Utils;
import com.idelogix.login.service.RoleService;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Nelson Terrazas
 */
public class RolesUI extends javax.swing.JInternalFrame {

    private String[][] resourcesActions2DArray;

    public RolesUI() {
        initComponents(); //Auto-generated by NetBeans
        checkAccessRights();
        myInitComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        leftPanel = new javax.swing.JPanel();
        pTable = new javax.swing.JScrollPane();
        tblMain = new javax.swing.JTable();
        lFilter = new javax.swing.JLabel();
        tSearch = new javax.swing.JTextField();
        bReload = new javax.swing.JButton();
        rightPanel = new javax.swing.JPanel();
        recordTabs = new javax.swing.JTabbedPane();
        tabGeneralInfo = new javax.swing.JPanel();
        lEnabled = new javax.swing.JLabel();
        cbEnabled = new javax.swing.JCheckBox();
        lDateCreated = new javax.swing.JLabel();
        tDateCreated = new javax.swing.JTextField();
        lComments = new javax.swing.JLabel();
        tComments = new javax.swing.JTextField();
        lName = new javax.swing.JLabel();
        tName = new javax.swing.JTextField();
        tId = new javax.swing.JTextField();
        lUserId = new javax.swing.JLabel();
        tabRoles = new javax.swing.JPanel();
        jScrollPaneLeft = new javax.swing.JScrollPane();
        listLeftUsers = new javax.swing.JList<>();
        jScrollPaneRight = new javax.swing.JScrollPane();
        listRightUsers = new javax.swing.JList<>();
        lAvailableRoles = new javax.swing.JLabel();
        lUserRoles = new javax.swing.JLabel();
        bRightLeftUsers = new javax.swing.JButton();
        bLeftRightUsers = new javax.swing.JButton();
        tabActions = new javax.swing.JPanel();
        lAvailableRoles1 = new javax.swing.JLabel();
        jScrollPaneLeft1 = new javax.swing.JScrollPane();
        listLeftResources = new javax.swing.JList<>();
        bLeftRightResources = new javax.swing.JButton();
        bRightLeftResources = new javax.swing.JButton();
        jScrollPaneRight1 = new javax.swing.JScrollPane();
        listRightResources = new javax.swing.JList<>();
        lAvailableRoles2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listRightActions = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        listLeftActions = new javax.swing.JList<>();
        bLeftRightActions = new javax.swing.JButton();
        bRightLeftActions = new javax.swing.JButton();
        bFilterResources = new javax.swing.JButton();
        lUserRoles2 = new javax.swing.JLabel();
        lUserRoles1 = new javax.swing.JLabel();
        pSaveData = new javax.swing.JPanel();
        bCancel = new javax.swing.JButton();
        bSave = new javax.swing.JButton();
        bDelete = new javax.swing.JButton();
        bEdit = new javax.swing.JButton();
        bCreate = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("_Roles_Maintenance");
        setToolTipText("");
        setMinimumSize(new java.awt.Dimension(0, 0));
        setName(""); // NOI18N
        setPreferredSize(new java.awt.Dimension(700, 500));
        setVisible(true);
        getContentPane().setLayout(new java.awt.GridLayout(1, 2));

        pTable.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(102, 102, 102), 1, true));

        tblMain.setModel(roleService.getDefaultTableModel( null ));
        pTable.setViewportView(tblMain);

        lFilter.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lFilter.setText("_Filter");
        lFilter.setToolTipText("");

        tSearch.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tSearchMouseClicked(evt);
            }
        });

        bReload.setText("_Reload");
        bReload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bReloadActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout leftPanelLayout = new javax.swing.GroupLayout(leftPanel);
        leftPanel.setLayout(leftPanelLayout);
        leftPanelLayout.setHorizontalGroup(
            leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(leftPanelLayout.createSequentialGroup()
                .addGroup(leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(leftPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lFilter)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tSearch, javax.swing.GroupLayout.DEFAULT_SIZE, 209, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bReload))
                    .addComponent(pTable, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
        leftPanelLayout.setVerticalGroup(
            leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, leftPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lFilter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(tSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bReload))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pTable, javax.swing.GroupLayout.DEFAULT_SIZE, 429, Short.MAX_VALUE)
                .addGap(7, 7, 7))
        );

        getContentPane().add(leftPanel);

        rightPanel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(102, 102, 102), 1, true));

        lEnabled.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lEnabled.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lEnabled.setText("_Enabled");

        cbEnabled.setEnabled(false);

        lDateCreated.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lDateCreated.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lDateCreated.setText("_Date_Created");

        tDateCreated.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        tDateCreated.setDisabledTextColor(new java.awt.Color(51, 51, 51));
        tDateCreated.setEnabled(false);

        lComments.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lComments.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lComments.setText("_Comments");

        tComments.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        tComments.setDisabledTextColor(new java.awt.Color(102, 102, 102));
        tComments.setEnabled(false);
        tComments.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tCommentsKeyPressed(evt);
            }
        });

        lName.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lName.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lName.setText("_Name");

        tName.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        tName.setDisabledTextColor(new java.awt.Color(51, 51, 51));
        tName.setEnabled(false);
        tName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tNameKeyPressed(evt);
            }
        });

        tId.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        tId.setDisabledTextColor(new java.awt.Color(51, 51, 51));
        tId.setEnabled(false);

        lUserId.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lUserId.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lUserId.setText("_Id");

        javax.swing.GroupLayout tabGeneralInfoLayout = new javax.swing.GroupLayout(tabGeneralInfo);
        tabGeneralInfo.setLayout(tabGeneralInfoLayout);
        tabGeneralInfoLayout.setHorizontalGroup(
            tabGeneralInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabGeneralInfoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tabGeneralInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tabGeneralInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(lUserId, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lComments, javax.swing.GroupLayout.DEFAULT_SIZE, 97, Short.MAX_VALUE))
                    .addComponent(lDateCreated, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lEnabled, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(tabGeneralInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tabGeneralInfoLayout.createSequentialGroup()
                        .addComponent(cbEnabled)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(tabGeneralInfoLayout.createSequentialGroup()
                        .addGroup(tabGeneralInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(tComments, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tName, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, tabGeneralInfoLayout.createSequentialGroup()
                                .addComponent(tDateCreated, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                                .addGap(80, 80, 80))
                            .addComponent(tId, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(32, 32, 32))))
        );
        tabGeneralInfoLayout.setVerticalGroup(
            tabGeneralInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tabGeneralInfoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tabGeneralInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lUserId, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(tabGeneralInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(tabGeneralInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tComments, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lComments))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(tabGeneralInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tDateCreated, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lDateCreated))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addGroup(tabGeneralInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(cbEnabled)
                    .addComponent(lEnabled))
                .addGap(167, 167, 167))
        );

        lName.getAccessibleContext().setAccessibleDescription("");

        recordTabs.addTab("_Role_information", tabGeneralInfo);

        listLeftUsers.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "User 1", "User 2", "User 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        listLeftUsers.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        listLeftUsers.setToolTipText("");
        listLeftUsers.setEnabled(false);
        jScrollPaneLeft.setViewportView(listLeftUsers);

        listRightUsers.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "User 3", "User 4" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        listRightUsers.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        listRightUsers.setEnabled(false);
        jScrollPaneRight.setViewportView(listRightUsers);

        lAvailableRoles.setText("_Available_users");

        lUserRoles.setText("_Role's_users");

        bRightLeftUsers.setText("<--");
        bRightLeftUsers.setEnabled(false);
        bRightLeftUsers.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bRightLeftUsersMouseClicked(evt);
            }
        });
        bRightLeftUsers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bRightLeftUsersActionPerformed(evt);
            }
        });

        bLeftRightUsers.setText("-->");
        bLeftRightUsers.setEnabled(false);
        bLeftRightUsers.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bLeftRightUsersMouseClicked(evt);
            }
        });
        bLeftRightUsers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bLeftRightUsersActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout tabRolesLayout = new javax.swing.GroupLayout(tabRoles);
        tabRoles.setLayout(tabRolesLayout);
        tabRolesLayout.setHorizontalGroup(
            tabRolesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabRolesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tabRolesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tabRolesLayout.createSequentialGroup()
                        .addComponent(jScrollPaneLeft)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(tabRolesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(bLeftRightUsers, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(bRightLeftUsers, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                    .addGroup(tabRolesLayout.createSequentialGroup()
                        .addComponent(lAvailableRoles)
                        .addGap(108, 108, 108)))
                .addGroup(tabRolesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lUserRoles, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPaneRight, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE))
                .addContainerGap())
        );
        tabRolesLayout.setVerticalGroup(
            tabRolesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabRolesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tabRolesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lAvailableRoles)
                    .addComponent(lUserRoles))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(tabRolesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tabRolesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPaneLeft, javax.swing.GroupLayout.DEFAULT_SIZE, 151, Short.MAX_VALUE)
                        .addComponent(jScrollPaneRight))
                    .addGroup(tabRolesLayout.createSequentialGroup()
                        .addComponent(bLeftRightUsers)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bRightLeftUsers)))
                .addContainerGap(139, Short.MAX_VALUE))
        );

        recordTabs.addTab("_Role_users", tabRoles);

        tabActions.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                tabActionsFocusGained(evt);
            }
        });

        lAvailableRoles1.setText("_Available_resources");

        listLeftResources.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "User 1", "User 2", "User 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        listLeftResources.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        listLeftResources.setToolTipText("");
        listLeftResources.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                listLeftResourcesMousePressed(evt);
            }
        });
        jScrollPaneLeft1.setViewportView(listLeftResources);

        bLeftRightResources.setText("-->");
        bLeftRightResources.setEnabled(false);
        bLeftRightResources.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bLeftRightResourcesMouseClicked(evt);
            }
        });
        bLeftRightResources.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bLeftRightResourcesActionPerformed(evt);
            }
        });

        bRightLeftResources.setText("<--");
        bRightLeftResources.setEnabled(false);
        bRightLeftResources.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bRightLeftResourcesMouseClicked(evt);
            }
        });
        bRightLeftResources.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bRightLeftResourcesActionPerformed(evt);
            }
        });

        listRightResources.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "User 3", "User 4" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        listRightResources.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        listRightResources.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                listRightResourcesMousePressed(evt);
            }
        });
        jScrollPaneRight1.setViewportView(listRightResources);

        lAvailableRoles2.setText("_Available_actions");

        listRightActions.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Action 3" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        listRightActions.setEnabled(false);
        listRightActions.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                listRightActionsMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(listRightActions);

        listLeftActions.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Action 1", "Action 2" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        listLeftActions.setEnabled(false);
        listLeftActions.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                listLeftActionsMousePressed(evt);
            }
        });
        jScrollPane2.setViewportView(listLeftActions);

        bLeftRightActions.setText("-->");
        bLeftRightActions.setEnabled(false);
        bLeftRightActions.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bLeftRightActionsMouseClicked(evt);
            }
        });
        bLeftRightActions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bLeftRightActionsActionPerformed(evt);
            }
        });

        bRightLeftActions.setText("<--");
        bRightLeftActions.setEnabled(false);
        bRightLeftActions.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bRightLeftActionsMouseClicked(evt);
            }
        });
        bRightLeftActions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bRightLeftActionsActionPerformed(evt);
            }
        });

        bFilterResources.setFont(new java.awt.Font("Tahoma", 0, 9)); // NOI18N
        bFilterResources.setText("Filter");
        bFilterResources.setEnabled(false);
        bFilterResources.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bFilterResourcesMouseClicked(evt);
            }
        });
        bFilterResources.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bFilterResourcesActionPerformed(evt);
            }
        });

        lUserRoles2.setText("_Role's_resources");

        lUserRoles1.setText("_Resource's_actions");

        javax.swing.GroupLayout tabActionsLayout = new javax.swing.GroupLayout(tabActions);
        tabActions.setLayout(tabActionsLayout);
        tabActionsLayout.setHorizontalGroup(
            tabActionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabActionsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tabActionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lAvailableRoles1)
                    .addGroup(tabActionsLayout.createSequentialGroup()
                        .addGroup(tabActionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPaneLeft1)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(tabActionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tabActionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(tabActionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(bRightLeftResources, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(bLeftRightResources, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addComponent(bFilterResources))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tabActionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(bLeftRightActions, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(bRightLeftActions, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addComponent(lAvailableRoles2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(tabActionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 116, Short.MAX_VALUE)
                    .addComponent(jScrollPaneRight1)
                    .addGroup(tabActionsLayout.createSequentialGroup()
                        .addGroup(tabActionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lUserRoles2)
                            .addComponent(lUserRoles1))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        tabActionsLayout.setVerticalGroup(
            tabActionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabActionsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tabActionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lAvailableRoles1)
                    .addComponent(lUserRoles2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(tabActionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPaneRight1)
                    .addGroup(tabActionsLayout.createSequentialGroup()
                        .addComponent(bLeftRightResources)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bRightLeftResources)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(bFilterResources))
                    .addComponent(jScrollPaneLeft1))
                .addGap(6, 6, 6)
                .addGroup(tabActionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lAvailableRoles2)
                    .addComponent(lUserRoles1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(tabActionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tabActionsLayout.createSequentialGroup()
                        .addComponent(bLeftRightActions)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bRightLeftActions)
                        .addContainerGap(82, Short.MAX_VALUE))
                    .addGroup(tabActionsLayout.createSequentialGroup()
                        .addGroup(tabActionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addGap(12, 12, 12))))
        );

        recordTabs.addTab("_Role_resources", tabActions);

        pSaveData.setBackground(javax.swing.UIManager.getDefaults().getColor("Button.light"));

        bCancel.setText("_Cancel");
        bCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bCancelActionPerformed(evt);
            }
        });

        bSave.setText("_Save");
        bSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSaveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pSaveDataLayout = new javax.swing.GroupLayout(pSaveData);
        pSaveData.setLayout(pSaveDataLayout);
        pSaveDataLayout.setHorizontalGroup(
            pSaveDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pSaveDataLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(bSave)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bCancel)
                .addContainerGap())
        );
        pSaveDataLayout.setVerticalGroup(
            pSaveDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pSaveDataLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pSaveDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bCancel)
                    .addComponent(bSave))
                .addContainerGap())
        );

        bDelete.setText("_Delete");
        bDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bDeleteActionPerformed(evt);
            }
        });

        bEdit.setText("_Edit");
        bEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bEditActionPerformed(evt);
            }
        });

        bCreate.setText("_Create");
        bCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bCreateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout rightPanelLayout = new javax.swing.GroupLayout(rightPanel);
        rightPanel.setLayout(rightPanelLayout);
        rightPanelLayout.setHorizontalGroup(
            rightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rightPanelLayout.createSequentialGroup()
                .addGroup(rightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(rightPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(bDelete)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bCreate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bEdit))
                    .addComponent(recordTabs, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(rightPanelLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(pSaveData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        rightPanelLayout.setVerticalGroup(
            rightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, rightPanelLayout.createSequentialGroup()
                .addComponent(recordTabs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pSaveData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addGroup(rightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bEdit)
                    .addComponent(bCreate)
                    .addComponent(bDelete))
                .addContainerGap())
        );

        recordTabs.getAccessibleContext().setAccessibleName("");

        getContentPane().add(rightPanel);

        getAccessibleContext().setAccessibleName("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tSearchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tSearchMouseClicked
        if (tSearch.getText().equals(UIUtils.getLocalText("msg._Enter_Text")))
            tSearch.setText("");
    }//GEN-LAST:event_tSearchMouseClicked

    private void bReloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bReloadActionPerformed
        reloadTable();
        clearValues();
    }//GEN-LAST:event_bReloadActionPerformed

    private void bDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bDeleteActionPerformed
        deleteRecord();
    }//GEN-LAST:event_bDeleteActionPerformed

    private void bCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bCreateActionPerformed
        clearValues();
        setRolesLists();
        editRecord();
    }//GEN-LAST:event_bCreateActionPerformed

    private void bEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bEditActionPerformed
        if (Integer.parseInt(tId.getText()) != 0)
            editRecord();
    }//GEN-LAST:event_bEditActionPerformed

    private void bSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSaveActionPerformed
        if (tId.getText().equals("0")) {
            createRecord();
        } else {
            saveRecord();
        }
        setAllControlsEnabled(true);
        setEditableFieldsEnabled(false);
        pSaveData.setVisible(false);
        JOptionPane.showMessageDialog(this, UIUtils.getLocalText("msg._Operation_successful!"));
    }//GEN-LAST:event_bSaveActionPerformed

    private void bCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bCancelActionPerformed
        setAllControlsEnabled(true);
        clearValues();
        setEditableFieldsEnabled(false);
        pSaveData.setVisible(false);
        if (tblMain.getSelectedRow() >= 0)
            updateValuesFromTable(tblMain.getSelectedRow());
    }//GEN-LAST:event_bCancelActionPerformed

    private void bFilterResourcesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bFilterResourcesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bFilterResourcesActionPerformed

    private void bRightLeftActionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bRightLeftActionsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bRightLeftActionsActionPerformed

    private void bLeftRightActionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bLeftRightActionsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bLeftRightActionsActionPerformed

    private void bRightLeftResourcesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bRightLeftResourcesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bRightLeftResourcesActionPerformed

    private void bLeftRightResourcesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bLeftRightResourcesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bLeftRightResourcesActionPerformed

    private void bLeftRightUsersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bLeftRightUsersActionPerformed
        //    if (listLeftUsers.getSelectedValue() != null)
        //        UIUtils.transferElement(listLeftUsers.getSelectedValue(), listLeftUsers, listRightUsers);
    }//GEN-LAST:event_bLeftRightUsersActionPerformed

    private void bRightLeftUsersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bRightLeftUsersActionPerformed
        //    if (listRightUsers.getSelectedValue() != null)
        //        UIUtils.transferElement(listRightUsers.getSelectedValue(), listRightUsers, listLeftUsers);
    }//GEN-LAST:event_bRightLeftUsersActionPerformed

    private void tNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tNameKeyPressed
        if (tName.getText().length() >= MAX_ROLE_NAME) {
            JOptionPane.showMessageDialog(this, UIUtils.getLocalText("msg._Max._length_exceeded!") + "  " + MAX_ROLE_NAME);
            tName.setText(tName.getText().substring(0, MAX_ROLE_NAME - 1));
        }
    }//GEN-LAST:event_tNameKeyPressed

    private void tCommentsKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tCommentsKeyPressed
        if (tComments.getText().length() >= MAX_ROLE_COMMENTS) {
            JOptionPane.showMessageDialog(this, UIUtils.getLocalText("msg._Max._length_exceeded!") + "  " + MAX_ROLE_COMMENTS);
            tComments.setText(tComments.getText().substring(0, MAX_ROLE_COMMENTS - 1));
        }
    }//GEN-LAST:event_tCommentsKeyPressed

    private void tabActionsFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tabActionsFocusGained
        //Update data for Actions tab
        resourcesActions2DArray = RoleService.getInstance().getRoleResourcesActionsName2DArray(tName.getText());
    }//GEN-LAST:event_tabActionsFocusGained

    private void bLeftRightResourcesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bLeftRightResourcesMouseClicked
        //Add user to list
        if (listLeftResources.getSelectedValue() != null) {
            UIUtils.transferElement(listLeftResources.getSelectedValue(), listLeftResources, listRightResources);
        }
    }//GEN-LAST:event_bLeftRightResourcesMouseClicked

    private void bRightLeftResourcesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bRightLeftResourcesMouseClicked
        //Remove user from list
        if (listRightResources.getSelectedValue() != null) {
            syncResourceMovedLeft(listRightResources.getSelectedValue());
            UIUtils.transferElement(listRightResources.getSelectedValue(), listRightResources, listLeftResources);
        }
    }//GEN-LAST:event_bRightLeftResourcesMouseClicked

    private void bFilterResourcesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bFilterResourcesMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_bFilterResourcesMouseClicked

    private void bLeftRightActionsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bLeftRightActionsMouseClicked
        //Add action
        if (listLeftActions.getSelectedValue() != null) {
            syncActionMovedRight(listRightResources.getSelectedValue(), listLeftActions.getSelectedValue());
            UIUtils.transferElement(listLeftActions.getSelectedValue(), listLeftActions, listRightActions);
        }
    }//GEN-LAST:event_bLeftRightActionsMouseClicked

    private void bRightLeftActionsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bRightLeftActionsMouseClicked
        //Remove action from list
        if (listRightActions.getSelectedValue() != null) {
            syncActionMovedLeft(listRightResources.getSelectedValue(), listRightActions.getSelectedValue());
            UIUtils.transferElement(listRightActions.getSelectedValue(), listRightActions, listLeftActions);
        }
    }//GEN-LAST:event_bRightLeftActionsMouseClicked

    private void bLeftRightUsersMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bLeftRightUsersMouseClicked
        //Add user to list
        if (listLeftUsers.getSelectedValue() != null) {
            UIUtils.transferElement(listLeftUsers.getSelectedValue(), listLeftUsers, listRightUsers);
        }

    }//GEN-LAST:event_bLeftRightUsersMouseClicked

    private void bRightLeftUsersMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bRightLeftUsersMouseClicked
        //Remove user from list
        if (listRightUsers.getSelectedValue() != null)
            UIUtils.transferElement(listRightUsers.getSelectedValue(), listRightUsers, listLeftUsers);
    }//GEN-LAST:event_bRightLeftUsersMouseClicked

    private void listLeftResourcesMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listLeftResourcesMousePressed
        // When clicked get selected Resource and show Actions allowed
        listRightResources.clearSelection();
        if (listLeftResources.getSelectedValue() != null) {
            bLeftRightActions.setEnabled(false);
            bRightLeftActions.setEnabled(false);
            String selectedResource = listLeftResources.getSelectedValue();
            setActionsLists(selectedResource);
        }
    }//GEN-LAST:event_listLeftResourcesMousePressed

    private void listRightResourcesMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listRightResourcesMousePressed
        // When clicked get selected Resource and show Actions allowed
        listLeftResources.clearSelection();
        if (listRightResources.getSelectedValue() != null) {
            if(listRightActions.isEnabled()){
                bLeftRightActions.setEnabled(true);
                bRightLeftActions.setEnabled(true);
            }
            String selectedResource = listRightResources.getSelectedValue();
            setActionsLists(selectedResource);
        }
    }//GEN-LAST:event_listRightResourcesMousePressed

    private void listRightActionsMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listRightActionsMousePressed
        listLeftActions.clearSelection();
    }//GEN-LAST:event_listRightActionsMousePressed

    private void listLeftActionsMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listLeftActionsMousePressed
        listRightActions.clearSelection();
    }//GEN-LAST:event_listLeftActionsMousePressed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bCancel;
    private javax.swing.JButton bCreate;
    private javax.swing.JButton bDelete;
    private javax.swing.JButton bEdit;
    private javax.swing.JButton bFilterResources;
    private javax.swing.JButton bLeftRightActions;
    private javax.swing.JButton bLeftRightResources;
    private javax.swing.JButton bLeftRightUsers;
    private javax.swing.JButton bReload;
    private javax.swing.JButton bRightLeftActions;
    private javax.swing.JButton bRightLeftResources;
    private javax.swing.JButton bRightLeftUsers;
    private javax.swing.JButton bSave;
    private javax.swing.JCheckBox cbEnabled;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPaneLeft;
    private javax.swing.JScrollPane jScrollPaneLeft1;
    private javax.swing.JScrollPane jScrollPaneRight;
    private javax.swing.JScrollPane jScrollPaneRight1;
    private javax.swing.JLabel lAvailableRoles;
    private javax.swing.JLabel lAvailableRoles1;
    private javax.swing.JLabel lAvailableRoles2;
    private javax.swing.JLabel lComments;
    private javax.swing.JLabel lDateCreated;
    private javax.swing.JLabel lEnabled;
    private javax.swing.JLabel lFilter;
    private javax.swing.JLabel lName;
    private javax.swing.JLabel lUserId;
    private javax.swing.JLabel lUserRoles;
    private javax.swing.JLabel lUserRoles1;
    private javax.swing.JLabel lUserRoles2;
    private javax.swing.JPanel leftPanel;
    private javax.swing.JList<String> listLeftActions;
    private javax.swing.JList<String> listLeftResources;
    private javax.swing.JList<String> listLeftUsers;
    private javax.swing.JList<String> listRightActions;
    private javax.swing.JList<String> listRightResources;
    private javax.swing.JList<String> listRightUsers;
    private javax.swing.JPanel pSaveData;
    private javax.swing.JScrollPane pTable;
    private javax.swing.JTabbedPane recordTabs;
    private javax.swing.JPanel rightPanel;
    private javax.swing.JTextField tComments;
    private javax.swing.JTextField tDateCreated;
    private javax.swing.JTextField tId;
    private javax.swing.JTextField tName;
    private javax.swing.JTextField tSearch;
    private javax.swing.JPanel tabActions;
    private javax.swing.JPanel tabGeneralInfo;
    private javax.swing.JPanel tabRoles;
    private javax.swing.JTable tblMain;
    // End of variables declaration//GEN-END:variables

    private String dateFormat = null;
    private final RoleService roleService = RoleService.getInstance();
    private final int MAX_ROLE_NAME = roleService.getStringFieldMaxSize("role", "name");
    private final int MAX_ROLE_COMMENTS = roleService.getStringFieldMaxSize("role", "comments");

    private void myInitComponents() {
        setTitle(UIUtils.getLocalText("title._Roles_Maintenance"));
        dateFormat = Props.getInstance().getAppProps("app.dateFormat");
        pSaveData.setVisible(false);
        tSearch.setText(UIUtils.getLocalText("msg._Enter_Text"));
        clearValues();
        UIUtils.getLocalText(this);
        setTableConfiguration();
        //Includes security checks
        setAllControlsEnabled(true);
    }

    private void checkAccessRights() {
        if (!UIUtils.isResourceActionAllowed(this, Globals.VIEW_ACTION)) {
            JOptionPane.showMessageDialog(this, UIUtils.getLocalText("msg._You_are_not_authorized!"));
            this.dispose();
        }
    }

    private void clearValues() {
        tId.setText("0");
        tName.setText("");
        SimpleDateFormat formatter = new SimpleDateFormat(dateFormat);
        tDateCreated.setText(formatter.format(new Date()));
        tComments.setText("");
        cbEnabled.setSelected(false);
        //listLeft.setListData(new String[0]);
        listLeftUsers.setListData(RoleService.getInstance().getRoleNotUserNamesList(-1)); //Bring all users
        listRightUsers.setListData(new String[0]);
        listRightResources.setListData(new String[0]);
        listLeftResources.setListData(new String[0]);
        listRightActions.setListData(new String[0]);
        listLeftActions.setListData(new String[0]);
    }

    private void setTableConfiguration() {
        //Avoid editing
        tblMain.setDefaultEditor(Object.class, null);
        //Show only first 3 rows (0,1,2), hide the rest
        UIUtils.hideTableColumns(tblMain, new int[]{3, 4});
        tblMain.getSelectionModel().addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                //Utils.print(e.toString());
                if (e.getValueIsAdjusting() && tblMain.getSelectedRow() >= 0 ) {
                    updateValuesFromTable(tblMain.getSelectedRow());
                    //Utils.print("Updating fields");
                }
            }
        });
    }

    private void editRecord() {
        setAllControlsEnabled(false);
        setEditableFieldsEnabled(true);
        recordTabs.setSelectedIndex(0);
        pSaveData.setVisible(true);
    }

    private void createRecord() {
        boolean success = false;
        try {
            success = RoleService.getInstance().createRole(Integer.parseInt(tId.getText()), tName.getText(), tComments.getText(),
                    cbEnabled.isSelected(), new SimpleDateFormat(dateFormat).parse(tDateCreated.getText()), UIUtils.jListToArrayList(listRightUsers));
            if (success) {
                //Save Role's Resources and Actions
                int roleId = RoleService.getInstance().getRole(tName.getText()).getId();
                success = RoleService.getInstance().saveRoleResourcesActions(roleId, resourcesActions2DArray);
            }
        } catch (ParseException ex) {
            Logger.getLogger(RolesUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (success) {
            tId.setText("" + RoleService.getInstance().getRole(tName.getText()).getId());
            tSearch.setText("");
            reloadTable();
        }
    }

    private void reloadTable() {
        String sText = tSearch.getText();
        if (tSearch.getText().equals(UIUtils.getLocalText("msg._Enter_Text"))) {
            sText = "";
        }
        tblMain.setModel(roleService.getDefaultTableModel(sText));
        setTableConfiguration();
        tblMain.repaint();
    }

    private void updateTableRow(int row, String name, String comments, boolean enabled) {
        tblMain.getModel().setValueAt(name, row, 1);
        tblMain.getModel().setValueAt(comments, row, 2);
        tblMain.getModel().setValueAt(enabled, row, 3);
    }

    private void saveRecord() {
        boolean success = true;
        try {
            success = roleService.updateRole(Integer.parseInt(tId.getText()), tName.getText(), tComments.getText(),
                    cbEnabled.isSelected(), new SimpleDateFormat(dateFormat).parse(tDateCreated.getText()), UIUtils.jListToArrayList(listRightUsers));
            if (success) {
                //Save Role's Resources and Actions
                success = RoleService.getInstance().deleteAllRoleResources(Integer.parseInt(tId.getText()));
                if (success) {
                    success = RoleService.getInstance().saveRoleResourcesActions(Integer.parseInt(tId.getText()), resourcesActions2DArray);
                }
            }

        } catch (ParseException ex) {
            Logger.getLogger(RolesUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (success) {
            updateTableRow(tblMain.getSelectedRow(), tName.getText(), tComments.getText(), cbEnabled.isSelected());
        }
    }

    private void deleteRecord() {
        int opc = Utils.confirmDialog(this, UIUtils.getLocalText("msg._Continue_deleteing_record?"));
        if (opc == 0) {
            if (roleService.deleteRole(Integer.parseInt(tId.getText()))) {
                JOptionPane.showMessageDialog(this, UIUtils.getLocalText("msg._Operation_successful!"));
                DefaultTableModel dtm = (DefaultTableModel) tblMain.getModel();
                dtm.removeRow(tblMain.getSelectedRow());
                clearValues();
            } else {
                JOptionPane.showMessageDialog(this, UIUtils.getLocalText("msg._Operation_was_not_successful"));
            }
        }
    }

    private void updateValuesFromTable(int selectedRowIndex) {
        tId.setText(String.valueOf(tblMain.getValueAt(selectedRowIndex, 0)));
        tName.setText((String) tblMain.getValueAt(selectedRowIndex, 1));
        tComments.setText((String) tblMain.getValueAt(selectedRowIndex, 2));
        cbEnabled.setSelected((Boolean) tblMain.getValueAt(selectedRowIndex, 3));
        Date d = null;
        try {
            //Get original date from TablemModel with yyyy-MM-dd format
            d = new SimpleDateFormat("yyyy-MM-dd").parse("" + tblMain.getValueAt(selectedRowIndex, 4));
        } catch (ParseException ex) {
            Logger.getLogger(RolesUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        //Convert to app's default date format and display
        SimpleDateFormat DateFor = new SimpleDateFormat(Props.getInstance().getAppProps("app.dateFormat"));
        String stringDate = DateFor.format(d);
        tDateCreated.setText(stringDate);
        setRolesLists();
    }

    private void setEditableFieldsEnabled(boolean sw) {
        tName.setEnabled(sw);
        tComments.setEnabled(sw);
        cbEnabled.setEnabled(sw);
        listLeftUsers.setEnabled(sw);
        listRightUsers.setEnabled(sw);
        bLeftRightUsers.setEnabled(sw);
        bRightLeftUsers.setEnabled(sw);
        bLeftRightResources.setEnabled(sw);
        bRightLeftResources.setEnabled(sw);
        bLeftRightActions.setEnabled(sw);
        bRightLeftActions.setEnabled(sw);
        listRightResources.setEnabled(true);
        listLeftResources.setEnabled(true);
        listRightActions.setEnabled(sw);
        listLeftActions.setEnabled(sw);
        tName.requestFocus();
    }

    private void setAllControlsEnabled(boolean sw) {
        tSearch.setEnabled(sw);
        lFilter.setEnabled(sw);
        bReload.setEnabled(sw);
        tblMain.setEnabled(sw);
        bDelete.setEnabled(sw);
        bCreate.setEnabled(sw);
        bEdit.setEnabled(sw);
        //Check access rights 
        if (!UIUtils.isResourceActionAllowed(this, Globals.DELETE_ACTION)) {
            bDelete.setEnabled(sw);
        }
        if (!UIUtils.isResourceActionAllowed(this, Globals.CREATE_ACTION)) {
            bCreate.setEnabled(sw);
        }
        if (!UIUtils.isResourceActionAllowed(this, Globals.EDIT_ACTION)) {
            bEdit.setEnabled(sw);
        }
    }

    private void setRolesLists() {
        //Geat arr of users names with that role
        listLeftUsers.setListData(RoleService.getInstance().getRoleNotUserNamesList(Integer.parseInt(tId.getText())));
        listRightUsers.setListData(RoleService.getInstance().getRoleUsersNameList(Integer.parseInt(tId.getText())));
        resourcesActions2DArray = RoleService.getInstance().getRoleResourcesActionsName2DArray(Integer.parseInt(tId.getText()));
        Utils.print(Arrays.deepToString(resourcesActions2DArray));
        String[] roleResourceNames = Utils.getUniqueColumnValuesFrom2DArray(resourcesActions2DArray, 0);
        listRightResources.setListData(roleResourceNames);
        ArrayList<String> availableResourceNames = ResourceService.getInstance().getAllNames();
        String[] availableResourceNamesArray = Utils.stringListToArray(availableResourceNames);
        listLeftResources.setListData(Utils.getStringsNotInList(availableResourceNamesArray, roleResourceNames));
        listRightActions.setListData(new String[0]);
        listLeftActions.setListData(new String[0]);
    }

    private void setActionsLists(String resourceName) {
        //Get strings from column 1, "actions", from Role's resourcesActions2DArray
        ArrayList<String> currentActions = new ArrayList<>();
        for (String[] resourcesAction : resourcesActions2DArray) {
            Utils.print("++++"+resourcesAction[0]+"  ?? "+resourceName);
            Utils.print(Arrays.deepToString(resourcesActions2DArray));
            if (resourcesAction[0].equals(resourceName)) {
                currentActions.add(resourcesAction[1]);
            }
        }
        listRightActions.setListData(Utils.stringListToArray(currentActions));
        //Get other available "actions" for this resource 
        ArrayList<String> allAvailableActions = new ArrayList<>();
        Resource r = ResourceService.getInstance().getResource(resourceName);
        r = ResourceService.getInstance().loadActions(r);
        //Get names (strings) from Action object list
        for (Action a : r.getActionArrayList()) {
            allAvailableActions.add(a.getName());
        }
        //Get only the actions not already selected for the selected "resource"
        String[] otherAvailableActions = Utils.getStringsNotInList(Utils.stringListToArray(allAvailableActions), Utils.stringListToArray(currentActions));
        listLeftActions.setListData(otherAvailableActions);
    }

    private void syncResourceMovedLeft(String resource) {
        //Pressed Lef-->Right on Resources ; "resource" has been moved to right list
        // private String[][] resourcesActions2DArray;
        int counter = 0;
        for (int i = 0; i < resourcesActions2DArray.length; i++) {
            if (!resourcesActions2DArray[i][0].equals(resource)) {
                counter++;
            }
        }
        String[][] new2DArray = new String[counter][2];
        int j = 0;
        for (int i = 0; i < resourcesActions2DArray.length; i++) {
            if (!resourcesActions2DArray[i][0].equals(resource)) {
                new2DArray[j][0] = resourcesActions2DArray[i][0];
                new2DArray[j][1] = resourcesActions2DArray[i][1];
                j++;
            }
        }
        Utils.print("syncResourceMovedLeft:"+Arrays.deepToString(new2DArray));
        resourcesActions2DArray = new2DArray;
    }

    private void syncActionMovedLeft(String resource, String action) {
        String[][] new2DArray = new String[resourcesActions2DArray.length - 1][2];
        int j = 0;
        for (int i = 0; i < resourcesActions2DArray.length; i++) {
            if (!(resourcesActions2DArray[i][0].equals(resource)  && resourcesActions2DArray[i][1].equals(action))) {
                new2DArray[j][0] = resourcesActions2DArray[i][0];
                new2DArray[j][1] = resourcesActions2DArray[i][1];
                j++;
            }
        }
        Utils.print("syncActionMovedLeft:"+Arrays.deepToString(new2DArray));
        resourcesActions2DArray = new2DArray;
    }

    private void syncActionMovedRight(String resource, String action) {
        String[][] new2DArray = new String[resourcesActions2DArray.length + 1][2];
        int i;
        for (i = 0; i < resourcesActions2DArray.length; i++) {
            new2DArray[i][0] = resourcesActions2DArray[i][0];
            new2DArray[i][1] = resourcesActions2DArray[i][1];
        }
        new2DArray[i][0] = resource;
        new2DArray[i][1] = action;
        Utils.print("syncActionMovedRght:"+Arrays.deepToString(new2DArray));
        resourcesActions2DArray = new2DArray;
    }

}
