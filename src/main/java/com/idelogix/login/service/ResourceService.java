/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.idelogix.login.service;

import com.idelogix.login.dao.ActionDAO;
import com.idelogix.login.dao.ResourceDAO;
import com.idelogix.login.dao.RoleDAO;
import com.idelogix.login.model.Action;
import com.idelogix.login.model.GenericEntity;
import com.idelogix.login.model.Resource;
import com.idelogix.login.model.Role;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Nelson Terrazas
 */
public class ResourceService {

    private static final ResourceService resourceServiceInstance = new ResourceService();
    //Can later on be change with Dependency Injection
    private final ResourceDAO resourceDao = ResourceDAO.getInstance();
    //private final IResourceDAO securityDao = ResourceJdbcDAO.getInstance();

    public static ResourceService getInstance() {
        return resourceServiceInstance;
    }

    private ResourceService() {
    }

    public boolean addResource(Resource r) {
        return resourceDao.add(r);
    }

    public boolean addResource(String name, String comments, Boolean enabled, ArrayList actions) {
        Resource r = new Resource(null, name, comments, enabled, null);
        if (addResource(r)) {
            r = getResource(r.getName()); // We get autogenerated ID
            saveActions(r.getId(), actions);
            return true;
        } else {
            return false;
        }
    }

    public boolean updateResource(Resource r) {
        return resourceDao.update(r);
    }

    public boolean updateResource(Integer uId, String name, String comments, boolean enabled, ArrayList actions) {
        Resource r = new Resource(uId, name, comments, enabled, null);
        if (updateResource(r)) {
            saveActions(r.getId(), actions);
            return true;
        } else {
            return false;
        }
    }
    
    public boolean deleteResource(int resourceId) {
        return resourceDao.delete(resourceId);
    }

    public boolean saveActions(int resourceId, ArrayList actions) {
        //First dele all current roles
        resourceDao.deleteAllResourceActions(resourceId);
        //Then update new roles
        return resourceDao.updateResourceActions(resourceId, actions);
    }

    public Resource getResource(int resourceId) {
        return (Resource) resourceDao.getById(resourceId);
    }

    public Resource getResource(String resourceName) {
        return (Resource) resourceDao.getByName(resourceName);
    }

    public Resource loadActions(Resource r) {
        return ResourceDAO.getInstance().loadResourceActions(r);
    }

    public ArrayList getAll() {
        return getAll(0, 0, null);
    }

    public ArrayList getAll(String searchString) {
        return getAll(0, 0, searchString);
    }

    public ArrayList getAll(int limit, int offset, String searchString) {
        ArrayList rList = resourceDao.getAll(limit, offset, searchString);
        return rList;
    }

    public ArrayList<String> getAllNames() {
        ArrayList allResources = getAll();
        ArrayList<String> names = new ArrayList<>();
        for (Object o : allResources) {
            names.add(((Resource) o).getName());
        }
        return names;
    }

    public boolean isActionAllowed(String resourceName, String actionName, String roleName) {
        Resource re = (Resource) resourceDao.getByName(resourceName);
        Action ac = (Action) ActionDAO.getInstance().getByName(actionName);
        Role ro = (Role) RoleDAO.getInstance().getByName(roleName);
        if (re == null || ac == null || ro == null) {
            return false;
        }
        int resourceId = resourceDao.getByName(resourceName).getId();
        int actionId = ActionDAO.getInstance().getByName(actionName).getId();
        int roleId = RoleDAO.getInstance().getByName(roleName).getId();
        return isActionAllowed(resourceId, actionId, roleId);
    }

    public boolean isActionAllowed(int resourceId, int actionId, int roleId) {
        return resourceDao.isActionAllowed(resourceId, actionId, roleId);
    }

    public int getStringFieldMaxSize(String entityName, String fieldName) {
        return resourceDao.getStringFieldMaxSize(entityName, fieldName);
    }

    public String[] getResourceNamesByType(int typeId) {
        return Utils.stringListToArray(resourceDao.getResourceNamesByType(typeId));
    }

    public String[] getResourceNamesByAction(int actionId) {
        return Utils.stringListToArray(resourceDao.getResourceNamesByAction(actionId));
    }

    public DefaultTableModel getTableModel(String searchText) {
        DefaultTableModel tModel = new DefaultTableModel();
        tModel.addColumn(Props.getInstance().getTxtProps("label._Id"));             //0
        tModel.addColumn(Props.getInstance().getTxtProps("label._Name"));           //1
        tModel.addColumn(Props.getInstance().getTxtProps("label._Comments"));       //2
        tModel.addColumn(Props.getInstance().getTxtProps("label._Enabled"));        //3
        tModel.addColumn(Props.getInstance().getTxtProps("label._Date_created"));   //4
        Object rowData[] = new Object[5];
        ArrayList<Resource> myData = getAll(searchText);
        for (int i = 0; i < myData.size(); i++) {
            rowData[0] = myData.get(i).getId();
            rowData[1] = myData.get(i).getName();
            rowData[2] = myData.get(i).getComments();
            rowData[3] = myData.get(i).getEnabled();
            rowData[4] = myData.get(i).getDateCreated(); //Assumed date is returned in format: "yyyy-MM-dd"
            tModel.addRow(rowData);
        }
        return tModel;
    }
    
    public String[] getResourceActionList(int resourceId) {
        Resource r = getResource(resourceId);
        ArrayList<Action> resourceActionList = r.getActionArrayList();
        String arr[] = new String[resourceActionList.size()];
        for (int i = 0; i < resourceActionList.size(); i++) {
            arr[i] = resourceActionList.get(i).getName();
        }
        return arr;
    }

    public String[] getResourceAvailableNewActions(String[] actions) {
        List currentActions = Arrays.asList(actions);
        ArrayList<GenericEntity> allActionsList = ActionDAO.getInstance().getAll();
        String arr[] = new String[allActionsList.size()];
        for (int i = 0; i < allActionsList.size(); i++) {
            if (!currentActions.contains(allActionsList.get(i).getName())) {
                arr[i] = allActionsList.get(i).getName();
            }
        }
        return arr;
    }
    
}
